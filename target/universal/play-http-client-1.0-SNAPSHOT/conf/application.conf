clustering {
  cluster.name = "ClusterSystem"
  node.host = "play-http-client"
  node.port = 2555
  seed.host = "akka-seed"
  seed.port = 2551
  worker.host = "akka-worker"
  worker.port = 2551
}

pidfile.path = "/dev/null"

app {
  askTimeout = 60000
}

play.akka.actor-system = ClusterSystem

akka {

  actor {
    provider = "akka.cluster.ClusterActorRefProvider"

    serializers {
      proto = "akka.remote.serialization.ProtobufSerializer"
      java = "akka.serialization.JavaSerializer"
    }
    serialization-bindings {
      "com.google.protobuf.Message" = proto
      "com.google.protobuf.GeneratedMessageLite" = proto
      "com.google.protobuf.GeneratedMessageV3" = proto
      "java.lang.String" = java
    }
    
     debug {
      receive = on // log all messages sent to an actor if that actors receive method is a LoggingReceive
      autoreceive = off // log all special messages like Kill, PoisoffPill etc sent to all actors
      lifecycle = off // log all actor lifecycle events of all actors
      fsm = off // enable logging of all events, transitioffs and timers of FSM Actors that extend LoggingFSM
      event-stream = off // enable logging of subscriptions (subscribe/unsubscribe) on the ActorSystem.eventStream
    }
  }

  remote {
    transport-failure-detector {
      heartbeat-interval = 10s   # default 4s
      acceptable-heartbeat-pause = 15s  # default 10s
    }
    
    log-remote-lifecycle-events = on
    enabled-transports = ["akka.remote.netty.tcp"]
    netty.tcp {
      hostname = ${HOST_NAME}
      port = 2551
    }
  }
    
  cluster {
	roles = [${NODE_ROLE}]
  }
}

play.crypto.secret = "frMnO8>nsHiMRn:v:E7]yJ<SZWeb7f<FgPz3QLU_PxF94NWhFGhEz;Qe]JyEWT5s"

play.filters.hosts {
  allowed = ["."]
}
